/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/CbusConnection/GetComPorts": {
    get: {
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": (string)[];
            "application/json": (string)[];
            "text/json": (string)[];
          };
        };
      };
    };
  };
  "/CbusConnection/Connect": {
    post: {
      requestBody?: {
        content: {
          "application/json-patch+json": components["schemas"]["ConnectionOptions"];
          "application/json": components["schemas"]["ConnectionOptions"];
          "text/json": components["schemas"]["ConnectionOptions"];
          "application/*+json": components["schemas"]["ConnectionOptions"];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": boolean;
            "application/json": boolean;
            "text/json": boolean;
          };
        };
      };
    };
  };
  "/CbusConnection/Status": {
    get: {
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": boolean;
            "application/json": boolean;
            "text/json": boolean;
          };
        };
      };
    };
  };
  "/CbusConnection/Send": {
    post: {
      requestBody?: {
        content: {
          "application/json-patch+json": components["schemas"]["ICbusOpCode"];
          "application/json": components["schemas"]["ICbusOpCode"];
          "text/json": components["schemas"]["ICbusOpCode"];
          "application/*+json": components["schemas"]["ICbusOpCode"];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": boolean;
            "application/json": boolean;
            "text/json": boolean;
          };
        };
      };
    };
  };
  "/Node/SetNodeNumber": {
    post: {
      requestBody?: {
        content: {
          "application/json-patch+json": components["schemas"]["SetNodeNumber"];
          "application/json": components["schemas"]["SetNodeNumber"];
          "text/json": components["schemas"]["SetNodeNumber"];
          "application/*+json": components["schemas"]["SetNodeNumber"];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": boolean;
            "application/json": boolean;
            "text/json": boolean;
          };
        };
      };
    };
  };
  "/Node/QueryNodes": {
    get: {
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": (components["schemas"]["ResponseToQueryNode"])[];
            "application/json": (components["schemas"]["ResponseToQueryNode"])[];
            "text/json": (components["schemas"]["ResponseToQueryNode"])[];
          };
        };
      };
    };
  };
  "/Node/ReadNodeParameters/{nodeNumber}": {
    get: {
      parameters: {
        path: {
          nodeNumber: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": (number)[];
            "application/json": (number)[];
            "text/json": (number)[];
          };
        };
      };
    };
  };
  "/Node/ReadNodeVariables/{nodeNumber}/{variableCount}": {
    get: {
      parameters: {
        path: {
          nodeNumber: number;
          variableCount: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": (number)[];
            "application/json": (number)[];
            "text/json": (number)[];
          };
        };
      };
    };
  };
  "/Node/UpdateNodeVariables": {
    post: {
      requestBody?: {
        content: {
          "application/json-patch+json": components["schemas"]["UpdateNodeVariablesRequest"];
          "application/json": components["schemas"]["UpdateNodeVariablesRequest"];
          "text/json": components["schemas"]["UpdateNodeVariablesRequest"];
          "application/*+json": components["schemas"]["UpdateNodeVariablesRequest"];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": boolean;
            "application/json": boolean;
            "text/json": boolean;
          };
        };
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /**
     * Format: int32 
     * @example 1: CommandNotSupported, 2: NotInLearnMode, 3: NotInSetupMode, 4: TooManyEvents, 6: InvalidEventVariableIndex, 7: InvalidEvent, 9: InvalidParameterIndex, 10: InvalidNodeVariableIndex, 11: InvalidEventVariableValue, 12: InvalidNodeFariableValue 
     * @enum {integer}
     */
    AccErrorCodeEnum: 1 | 2 | 3 | 4 | 6 | 7 | 9 | 10 | 11 | 12;
    AccessoryNodeDataEvent: {
      $type: "AccessoryNodeDataEvent";
    } & Omit<components["schemas"]["ICbusOpCode"], "$type"> & ({
      message?: components["schemas"]["ICbusStandardMessage"];
      /** Format: int32 */
      dataLength?: number;
      code?: string | null;
      description?: string | null;
      group?: components["schemas"]["OpCodeGroup"];
      name?: string | null;
      /** Format: int32 */
      number?: number;
      /** Format: int32 */
      priority?: number;
      /** Format: int32 */
      nodeNumber?: number;
      /** Format: int32 */
      data1?: number;
      /** Format: int32 */
      data2?: number;
      /** Format: int32 */
      data3?: number;
      /** Format: int32 */
      data4?: number;
      /** Format: int32 */
      data5?: number;
    });
    AccessoryNodeDataResponse: {
      $type: "AccessoryNodeDataResponse";
    } & Omit<components["schemas"]["ICbusOpCode"], "$type"> & ({
      message?: components["schemas"]["ICbusStandardMessage"];
      /** Format: int32 */
      dataLength?: number;
      code?: string | null;
      description?: string | null;
      group?: components["schemas"]["OpCodeGroup"];
      name?: string | null;
      /** Format: int32 */
      number?: number;
      /** Format: int32 */
      priority?: number;
      /** Format: int32 */
      nodeNumber?: number;
      /** Format: int32 */
      data1?: number;
      /** Format: int32 */
      data2?: number;
      /** Format: int32 */
      data3?: number;
      /** Format: int32 */
      data4?: number;
      /** Format: int32 */
      data5?: number;
    });
    AccessoryOff: {
      $type: "AccessoryOff";
    } & Omit<components["schemas"]["ICbusOpCode"], "$type"> & ({
      message?: components["schemas"]["ICbusStandardMessage"];
      /** Format: int32 */
      dataLength?: number;
      code?: string | null;
      description?: string | null;
      group?: components["schemas"]["OpCodeGroup"];
      name?: string | null;
      /** Format: int32 */
      number?: number;
      /** Format: int32 */
      priority?: number;
      /** Format: int32 */
      nodeNumber?: number;
      /** Format: int32 */
      eventNumber?: number;
      isLongEvent?: boolean;
      isShortEvent?: boolean;
      isOnEvent?: boolean;
      isOffEvent?: boolean;
    });
    AccessoryOff1: {
      $type: "AccessoryOff1";
    } & Omit<components["schemas"]["ICbusOpCode"], "$type"> & ({
      message?: components["schemas"]["ICbusStandardMessage"];
      /** Format: int32 */
      dataLength?: number;
      code?: string | null;
      description?: string | null;
      group?: components["schemas"]["OpCodeGroup"];
      name?: string | null;
      /** Format: int32 */
      number?: number;
      /** Format: int32 */
      priority?: number;
      /** Format: int32 */
      nodeNumber?: number;
      /** Format: int32 */
      eventNumber?: number;
      /** Format: int32 */
      data1?: number;
    });
    AccessoryOff2: {
      $type: "AccessoryOff2";
    } & Omit<components["schemas"]["ICbusOpCode"], "$type"> & ({
      message?: components["schemas"]["ICbusStandardMessage"];
      /** Format: int32 */
      dataLength?: number;
      code?: string | null;
      description?: string | null;
      group?: components["schemas"]["OpCodeGroup"];
      name?: string | null;
      /** Format: int32 */
      number?: number;
      /** Format: int32 */
      priority?: number;
      /** Format: int32 */
      nodeNumber?: number;
      /** Format: int32 */
      eventNumber?: number;
      /** Format: int32 */
      data1?: number;
      /** Format: int32 */
      data2?: number;
    });
    AccessoryOff3: {
      $type: "AccessoryOff3";
    } & Omit<components["schemas"]["ICbusOpCode"], "$type"> & ({
      message?: components["schemas"]["ICbusStandardMessage"];
      /** Format: int32 */
      dataLength?: number;
      code?: string | null;
      description?: string | null;
      group?: components["schemas"]["OpCodeGroup"];
      name?: string | null;
      /** Format: int32 */
      number?: number;
      /** Format: int32 */
      priority?: number;
      /** Format: int32 */
      nodeNumber?: number;
      /** Format: int32 */
      eventNumber?: number;
      /** Format: int32 */
      data1?: number;
      /** Format: int32 */
      data2?: number;
      /** Format: int32 */
      data3?: number;
    });
    AccessoryOffResponseEvent: {
      $type: "AccessoryOffResponseEvent";
    } & Omit<components["schemas"]["ICbusOpCode"], "$type"> & ({
      message?: components["schemas"]["ICbusStandardMessage"];
      /** Format: int32 */
      dataLength?: number;
      code?: string | null;
      description?: string | null;
      group?: components["schemas"]["OpCodeGroup"];
      name?: string | null;
      /** Format: int32 */
      number?: number;
      /** Format: int32 */
      priority?: number;
      /** Format: int32 */
      nodeNumber?: number;
      /** Format: int32 */
      eventNumber?: number;
    });
    AccessoryOffResponseEvent1: {
      $type: "AccessoryOffResponseEvent1";
    } & Omit<components["schemas"]["ICbusOpCode"], "$type"> & ({
      message?: components["schemas"]["ICbusStandardMessage"];
      /** Format: int32 */
      dataLength?: number;
      code?: string | null;
      description?: string | null;
      group?: components["schemas"]["OpCodeGroup"];
      name?: string | null;
      /** Format: int32 */
      number?: number;
      /** Format: int32 */
      priority?: number;
      /** Format: int32 */
      nodeNumber?: number;
      /** Format: int32 */
      eventNumber?: number;
      /** Format: int32 */
      data1?: number;
    });
    AccessoryOffResponseEvent2: {
      $type: "AccessoryOffResponseEvent2";
    } & Omit<components["schemas"]["ICbusOpCode"], "$type"> & ({
      message?: components["schemas"]["ICbusStandardMessage"];
      /** Format: int32 */
      dataLength?: number;
      code?: string | null;
      description?: string | null;
      group?: components["schemas"]["OpCodeGroup"];
      name?: string | null;
      /** Format: int32 */
      number?: number;
      /** Format: int32 */
      priority?: number;
      /** Format: int32 */
      nodeNumber?: number;
      /** Format: int32 */
      eventNumber?: number;
      /** Format: int32 */
      data1?: number;
      /** Format: int32 */
      data2?: number;
    });
    AccessoryOffResponseEvent3: {
      $type: "AccessoryOffResponseEvent3";
    } & Omit<components["schemas"]["ICbusOpCode"], "$type"> & ({
      message?: components["schemas"]["ICbusStandardMessage"];
      /** Format: int32 */
      dataLength?: number;
      code?: string | null;
      description?: string | null;
      group?: components["schemas"]["OpCodeGroup"];
      name?: string | null;
      /** Format: int32 */
      number?: number;
      /** Format: int32 */
      priority?: number;
      /** Format: int32 */
      nodeNumber?: number;
      /** Format: int32 */
      eventNumber?: number;
      /** Format: int32 */
      data1?: number;
      /** Format: int32 */
      data2?: number;
      /** Format: int32 */
      data3?: number;
    });
    AccessoryOn: {
      $type: "AccessoryOn";
    } & Omit<components["schemas"]["ICbusOpCode"], "$type"> & ({
      message?: components["schemas"]["ICbusStandardMessage"];
      /** Format: int32 */
      dataLength?: number;
      code?: string | null;
      description?: string | null;
      group?: components["schemas"]["OpCodeGroup"];
      name?: string | null;
      /** Format: int32 */
      number?: number;
      /** Format: int32 */
      priority?: number;
      /** Format: int32 */
      nodeNumber?: number;
      /** Format: int32 */
      eventNumber?: number;
      isLongEvent?: boolean;
      isShortEvent?: boolean;
      isOnEvent?: boolean;
      isOffEvent?: boolean;
    });
    AccessoryOn1: {
      $type: "AccessoryOn1";
    } & Omit<components["schemas"]["ICbusOpCode"], "$type"> & ({
      message?: components["schemas"]["ICbusStandardMessage"];
      /** Format: int32 */
      dataLength?: number;
      code?: string | null;
      description?: string | null;
      group?: components["schemas"]["OpCodeGroup"];
      name?: string | null;
      /** Format: int32 */
      number?: number;
      /** Format: int32 */
      priority?: number;
      /** Format: int32 */
      nodeNumber?: number;
      /** Format: int32 */
      eventNumber?: number;
      /** Format: int32 */
      data1?: number;
    });
    AccessoryOn2: {
      $type: "AccessoryOn2";
    } & Omit<components["schemas"]["ICbusOpCode"], "$type"> & ({
      message?: components["schemas"]["ICbusStandardMessage"];
      /** Format: int32 */
      dataLength?: number;
      code?: string | null;
      description?: string | null;
      group?: components["schemas"]["OpCodeGroup"];
      name?: string | null;
      /** Format: int32 */
      number?: number;
      /** Format: int32 */
      priority?: number;
      /** Format: int32 */
      nodeNumber?: number;
      /** Format: int32 */
      eventNumber?: number;
      /** Format: int32 */
      data1?: number;
      /** Format: int32 */
      data2?: number;
    });
    AccessoryOn3: {
      $type: "AccessoryOn3";
    } & Omit<components["schemas"]["ICbusOpCode"], "$type"> & ({
      message?: components["schemas"]["ICbusStandardMessage"];
      /** Format: int32 */
      dataLength?: number;
      code?: string | null;
      description?: string | null;
      group?: components["schemas"]["OpCodeGroup"];
      name?: string | null;
      /** Format: int32 */
      number?: number;
      /** Format: int32 */
      priority?: number;
      /** Format: int32 */
      nodeNumber?: number;
      /** Format: int32 */
      eventNumber?: number;
      /** Format: int32 */
      data1?: number;
      /** Format: int32 */
      data2?: number;
      /** Format: int32 */
      data3?: number;
    });
    AccessoryOnResponseEvent: {
      $type: "AccessoryOnResponseEvent";
    } & Omit<components["schemas"]["ICbusOpCode"], "$type"> & ({
      message?: components["schemas"]["ICbusStandardMessage"];
      /** Format: int32 */
      dataLength?: number;
      code?: string | null;
      description?: string | null;
      group?: components["schemas"]["OpCodeGroup"];
      name?: string | null;
      /** Format: int32 */
      number?: number;
      /** Format: int32 */
      priority?: number;
      /** Format: int32 */
      nodeNumber?: number;
      /** Format: int32 */
      eventNumber?: number;
    });
    AccessoryOnResponseEvent1: {
      $type: "AccessoryOnResponseEvent1";
    } & Omit<components["schemas"]["ICbusOpCode"], "$type"> & ({
      message?: components["schemas"]["ICbusStandardMessage"];
      /** Format: int32 */
      dataLength?: number;
      code?: string | null;
      description?: string | null;
      group?: components["schemas"]["OpCodeGroup"];
      name?: string | null;
      /** Format: int32 */
      number?: number;
      /** Format: int32 */
      priority?: number;
      /** Format: int32 */
      nodeNumber?: number;
      /** Format: int32 */
      eventNumber?: number;
      /** Format: int32 */
      data1?: number;
    });
    AccessoryOnResponseEvent2: {
      $type: "AccessoryOnResponseEvent2";
    } & Omit<components["schemas"]["ICbusOpCode"], "$type"> & ({
      message?: components["schemas"]["ICbusStandardMessage"];
      /** Format: int32 */
      dataLength?: number;
      code?: string | null;
      description?: string | null;
      group?: components["schemas"]["OpCodeGroup"];
      name?: string | null;
      /** Format: int32 */
      number?: number;
      /** Format: int32 */
      priority?: number;
      /** Format: int32 */
      nodeNumber?: number;
      /** Format: int32 */
      eventNumber?: number;
      /** Format: int32 */
      data1?: number;
      /** Format: int32 */
      data2?: number;
    });
    AccessoryOnResponseEvent3: {
      $type: "AccessoryOnResponseEvent3";
    } & Omit<components["schemas"]["ICbusOpCode"], "$type"> & ({
      message?: components["schemas"]["ICbusStandardMessage"];
      /** Format: int32 */
      dataLength?: number;
      code?: string | null;
      description?: string | null;
      group?: components["schemas"]["OpCodeGroup"];
      name?: string | null;
      /** Format: int32 */
      number?: number;
      /** Format: int32 */
      priority?: number;
      /** Format: int32 */
      nodeNumber?: number;
      /** Format: int32 */
      eventNumber?: number;
      /** Format: int32 */
      data1?: number;
      /** Format: int32 */
      data2?: number;
      /** Format: int32 */
      data3?: number;
    });
    AccessoryRequestEvent: {
      $type: "AccessoryRequestEvent";
    } & Omit<components["schemas"]["ICbusOpCode"], "$type"> & ({
      message?: components["schemas"]["ICbusStandardMessage"];
      /** Format: int32 */
      dataLength?: number;
      code?: string | null;
      description?: string | null;
      group?: components["schemas"]["OpCodeGroup"];
      name?: string | null;
      /** Format: int32 */
      number?: number;
      /** Format: int32 */
      priority?: number;
      /** Format: int32 */
      nodeNumber?: number;
      /** Format: int32 */
      eventNumber?: number;
    });
    AccessoryShortOff: {
      $type: "AccessoryShortOff";
    } & Omit<components["schemas"]["ICbusOpCode"], "$type"> & ({
      message?: components["schemas"]["ICbusStandardMessage"];
      /** Format: int32 */
      dataLength?: number;
      code?: string | null;
      description?: string | null;
      group?: components["schemas"]["OpCodeGroup"];
      name?: string | null;
      /** Format: int32 */
      number?: number;
      /** Format: int32 */
      priority?: number;
      /** Format: int32 */
      nodeNumber?: number;
      /** Format: int32 */
      deviceNumber?: number;
      isLongEvent?: boolean;
      isShortEvent?: boolean;
      isOnEvent?: boolean;
      isOffEvent?: boolean;
    });
    AccessoryShortOff1: {
      $type: "AccessoryShortOff1";
    } & Omit<components["schemas"]["ICbusOpCode"], "$type"> & ({
      message?: components["schemas"]["ICbusStandardMessage"];
      /** Format: int32 */
      dataLength?: number;
      code?: string | null;
      description?: string | null;
      group?: components["schemas"]["OpCodeGroup"];
      name?: string | null;
      /** Format: int32 */
      number?: number;
      /** Format: int32 */
      priority?: number;
      /** Format: int32 */
      nodeNumber?: number;
      /** Format: int32 */
      deviceNumber?: number;
      /** Format: int32 */
      data1?: number;
    });
    AccessoryShortOff2: {
      $type: "AccessoryShortOff2";
    } & Omit<components["schemas"]["ICbusOpCode"], "$type"> & ({
      message?: components["schemas"]["ICbusStandardMessage"];
      /** Format: int32 */
      dataLength?: number;
      code?: string | null;
      description?: string | null;
      group?: components["schemas"]["OpCodeGroup"];
      name?: string | null;
      /** Format: int32 */
      number?: number;
      /** Format: int32 */
      priority?: number;
      /** Format: int32 */
      nodeNumber?: number;
      /** Format: int32 */
      deviceNumber?: number;
      /** Format: int32 */
      data1?: number;
      /** Format: int32 */
      data2?: number;
    });
    AccessoryShortOff3: {
      $type: "AccessoryShortOff3";
    } & Omit<components["schemas"]["ICbusOpCode"], "$type"> & ({
      message?: components["schemas"]["ICbusStandardMessage"];
      /** Format: int32 */
      dataLength?: number;
      code?: string | null;
      description?: string | null;
      group?: components["schemas"]["OpCodeGroup"];
      name?: string | null;
      /** Format: int32 */
      number?: number;
      /** Format: int32 */
      priority?: number;
      /** Format: int32 */
      nodeNumber?: number;
      /** Format: int32 */
      deviceNumber?: number;
      /** Format: int32 */
      data1?: number;
      /** Format: int32 */
      data2?: number;
      /** Format: int32 */
      data3?: number;
    });
    AccessoryShortOn: {
      $type: "AccessoryShortOn";
    } & Omit<components["schemas"]["ICbusOpCode"], "$type"> & ({
      message?: components["schemas"]["ICbusStandardMessage"];
      /** Format: int32 */
      dataLength?: number;
      code?: string | null;
      description?: string | null;
      group?: components["schemas"]["OpCodeGroup"];
      name?: string | null;
      /** Format: int32 */
      number?: number;
      /** Format: int32 */
      priority?: number;
      /** Format: int32 */
      nodeNumber?: number;
      /** Format: int32 */
      deviceNumber?: number;
      isLongEvent?: boolean;
      isShortEvent?: boolean;
      isOnEvent?: boolean;
      isOffEvent?: boolean;
    });
    AccessoryShortOn1: {
      $type: "AccessoryShortOn1";
    } & Omit<components["schemas"]["ICbusOpCode"], "$type"> & ({
      message?: components["schemas"]["ICbusStandardMessage"];
      /** Format: int32 */
      dataLength?: number;
      code?: string | null;
      description?: string | null;
      group?: components["schemas"]["OpCodeGroup"];
      name?: string | null;
      /** Format: int32 */
      number?: number;
      /** Format: int32 */
      priority?: number;
      /** Format: int32 */
      nodeNumber?: number;
      /** Format: int32 */
      deviceNumber?: number;
      /** Format: int32 */
      data1?: number;
    });
    AccessoryShortOn2: {
      $type: "AccessoryShortOn2";
    } & Omit<components["schemas"]["ICbusOpCode"], "$type"> & ({
      message?: components["schemas"]["ICbusStandardMessage"];
      /** Format: int32 */
      dataLength?: number;
      code?: string | null;
      description?: string | null;
      group?: components["schemas"]["OpCodeGroup"];
      name?: string | null;
      /** Format: int32 */
      number?: number;
      /** Format: int32 */
      priority?: number;
      /** Format: int32 */
      nodeNumber?: number;
      /** Format: int32 */
      deviceNumber?: number;
      /** Format: int32 */
      data1?: number;
      /** Format: int32 */
      data2?: number;
    });
    AccessoryShortOn3: {
      $type: "AccessoryShortOn3";
    } & Omit<components["schemas"]["ICbusOpCode"], "$type"> & ({
      message?: components["schemas"]["ICbusStandardMessage"];
      /** Format: int32 */
      dataLength?: number;
      code?: string | null;
      description?: string | null;
      group?: components["schemas"]["OpCodeGroup"];
      name?: string | null;
      /** Format: int32 */
      number?: number;
      /** Format: int32 */
      priority?: number;
      /** Format: int32 */
      nodeNumber?: number;
      /** Format: int32 */
      deviceNumber?: number;
      /** Format: int32 */
      data1?: number;
      /** Format: int32 */
      data2?: number;
      /** Format: int32 */
      data3?: number;
    });
    AccessoryShortRequestEvent: {
      $type: "AccessoryShortRequestEvent";
    } & Omit<components["schemas"]["ICbusOpCode"], "$type"> & ({
      message?: components["schemas"]["ICbusStandardMessage"];
      /** Format: int32 */
      dataLength?: number;
      code?: string | null;
      description?: string | null;
      group?: components["schemas"]["OpCodeGroup"];
      name?: string | null;
      /** Format: int32 */
      number?: number;
      /** Format: int32 */
      priority?: number;
      /** Format: int32 */
      nodeNumber?: number;
      /** Format: int32 */
      deviceNumber?: number;
    });
    AccessoryShortResponseOff: {
      $type: "AccessoryShortResponseOff";
    } & Omit<components["schemas"]["ICbusOpCode"], "$type"> & ({
      message?: components["schemas"]["ICbusStandardMessage"];
      /** Format: int32 */
      dataLength?: number;
      code?: string | null;
      description?: string | null;
      group?: components["schemas"]["OpCodeGroup"];
      name?: string | null;
      /** Format: int32 */
      number?: number;
      /** Format: int32 */
      priority?: number;
      /** Format: int32 */
      nodeNumber?: number;
      /** Format: int32 */
      deviceNumber?: number;
    });
    AccessoryShortResponseOff1: {
      $type: "AccessoryShortResponseOff1";
    } & Omit<components["schemas"]["ICbusOpCode"], "$type"> & ({
      message?: components["schemas"]["ICbusStandardMessage"];
      /** Format: int32 */
      dataLength?: number;
      code?: string | null;
      description?: string | null;
      group?: components["schemas"]["OpCodeGroup"];
      name?: string | null;
      /** Format: int32 */
      number?: number;
      /** Format: int32 */
      priority?: number;
      /** Format: int32 */
      nodeNumber?: number;
      /** Format: int32 */
      deviceNumber?: number;
      /** Format: int32 */
      data1?: number;
    });
    AccessoryShortResponseOff2: {
      $type: "AccessoryShortResponseOff2";
    } & Omit<components["schemas"]["ICbusOpCode"], "$type"> & ({
      message?: components["schemas"]["ICbusStandardMessage"];
      /** Format: int32 */
      dataLength?: number;
      code?: string | null;
      description?: string | null;
      group?: components["schemas"]["OpCodeGroup"];
      name?: string | null;
      /** Format: int32 */
      number?: number;
      /** Format: int32 */
      priority?: number;
      /** Format: int32 */
      nodeNumber?: number;
      /** Format: int32 */
      deviceNumber?: number;
      /** Format: int32 */
      data1?: number;
      /** Format: int32 */
      data2?: number;
    });
    AccessoryShortResponseOff3: {
      $type: "AccessoryShortResponseOff3";
    } & Omit<components["schemas"]["ICbusOpCode"], "$type"> & ({
      message?: components["schemas"]["ICbusStandardMessage"];
      /** Format: int32 */
      dataLength?: number;
      code?: string | null;
      description?: string | null;
      group?: components["schemas"]["OpCodeGroup"];
      name?: string | null;
      /** Format: int32 */
      number?: number;
      /** Format: int32 */
      priority?: number;
      /** Format: int32 */
      nodeNumber?: number;
      /** Format: int32 */
      deviceNumber?: number;
      /** Format: int32 */
      data1?: number;
      /** Format: int32 */
      data2?: number;
      /** Format: int32 */
      data3?: number;
    });
    AccessoryShortResponseOn: {
      $type: "AccessoryShortResponseOn";
    } & Omit<components["schemas"]["ICbusOpCode"], "$type"> & ({
      message?: components["schemas"]["ICbusStandardMessage"];
      /** Format: int32 */
      dataLength?: number;
      code?: string | null;
      description?: string | null;
      group?: components["schemas"]["OpCodeGroup"];
      name?: string | null;
      /** Format: int32 */
      number?: number;
      /** Format: int32 */
      priority?: number;
      /** Format: int32 */
      nodeNumber?: number;
      /** Format: int32 */
      deviceNumber?: number;
    });
    AccessoryShortResponseOn1: {
      $type: "AccessoryShortResponseOn1";
    } & Omit<components["schemas"]["ICbusOpCode"], "$type"> & ({
      message?: components["schemas"]["ICbusStandardMessage"];
      /** Format: int32 */
      dataLength?: number;
      code?: string | null;
      description?: string | null;
      group?: components["schemas"]["OpCodeGroup"];
      name?: string | null;
      /** Format: int32 */
      number?: number;
      /** Format: int32 */
      priority?: number;
      /** Format: int32 */
      nodeNumber?: number;
      /** Format: int32 */
      deviceNumber?: number;
      /** Format: int32 */
      data1?: number;
    });
    AccessoryShortResponseOn2: {
      $type: "AccessoryShortResponseOn2";
    } & Omit<components["schemas"]["ICbusOpCode"], "$type"> & ({
      message?: components["schemas"]["ICbusStandardMessage"];
      /** Format: int32 */
      dataLength?: number;
      code?: string | null;
      description?: string | null;
      group?: components["schemas"]["OpCodeGroup"];
      name?: string | null;
      /** Format: int32 */
      number?: number;
      /** Format: int32 */
      priority?: number;
      /** Format: int32 */
      nodeNumber?: number;
      /** Format: int32 */
      deviceNumber?: number;
      /** Format: int32 */
      data1?: number;
      /** Format: int32 */
      data2?: number;
    });
    AccessoryShortResponseOn3: {
      $type: "AccessoryShortResponseOn3";
    } & Omit<components["schemas"]["ICbusOpCode"], "$type"> & ({
      message?: components["schemas"]["ICbusStandardMessage"];
      /** Format: int32 */
      dataLength?: number;
      code?: string | null;
      description?: string | null;
      group?: components["schemas"]["OpCodeGroup"];
      name?: string | null;
      /** Format: int32 */
      number?: number;
      /** Format: int32 */
      priority?: number;
      /** Format: int32 */
      nodeNumber?: number;
      /** Format: int32 */
      deviceNumber?: number;
      /** Format: int32 */
      data1?: number;
      /** Format: int32 */
      data2?: number;
      /** Format: int32 */
      data3?: number;
    });
    AllocateLocoToActivity: {
      $type: "AllocateLocoToActivity";
    } & Omit<components["schemas"]["ICbusOpCode"], "$type"> & ({
      message?: components["schemas"]["ICbusStandardMessage"];
      /** Format: int32 */
      dataLength?: number;
      code?: string | null;
      description?: string | null;
      group?: components["schemas"]["OpCodeGroup"];
      name?: string | null;
      /** Format: int32 */
      number?: number;
      /** Format: int32 */
      priority?: number;
      /** Format: int32 */
      session?: number;
      /** Format: int32 */
      allocationCode?: number;
    });
    BusHalt: {
      $type: "BusHalt";
    } & Omit<components["schemas"]["ICbusOpCode"], "$type"> & ({
      message?: components["schemas"]["ICbusStandardMessage"];
      /** Format: int32 */
      dataLength?: number;
      code?: string | null;
      description?: string | null;
      group?: components["schemas"]["OpCodeGroup"];
      name?: string | null;
      /** Format: int32 */
      number?: number;
      /** Format: int32 */
      priority?: number;
    });
    BusOn: {
      $type: "BusOn";
    } & Omit<components["schemas"]["ICbusOpCode"], "$type"> & ({
      message?: components["schemas"]["ICbusStandardMessage"];
      /** Format: int32 */
      dataLength?: number;
      code?: string | null;
      description?: string | null;
      group?: components["schemas"]["OpCodeGroup"];
      name?: string | null;
      /** Format: int32 */
      number?: number;
      /** Format: int32 */
      priority?: number;
    });
    ClearAllEventsFromANode: {
      $type: "ClearAllEventsFromANode";
    } & Omit<components["schemas"]["ICbusOpCode"], "$type"> & ({
      message?: components["schemas"]["ICbusStandardMessage"];
      /** Format: int32 */
      dataLength?: number;
      code?: string | null;
      description?: string | null;
      group?: components["schemas"]["OpCodeGroup"];
      name?: string | null;
      /** Format: int32 */
      number?: number;
      /** Format: int32 */
      priority?: number;
      /** Format: int32 */
      nodeNumber?: number;
    });
    CommandStationErrorReport: {
      $type: "CommandStationErrorReport";
    } & Omit<components["schemas"]["ICbusOpCode"], "$type"> & ({
      message?: components["schemas"]["ICbusStandardMessage"];
      /** Format: int32 */
      dataLength?: number;
      code?: string | null;
      description?: string | null;
      group?: components["schemas"]["OpCodeGroup"];
      name?: string | null;
      /** Format: int32 */
      number?: number;
      /** Format: int32 */
      priority?: number;
      /** Format: int32 */
      data1?: number;
      /** Format: int32 */
      data2?: number;
      dccErrorCode?: components["schemas"]["DccErrorCodeEnum"];
    });
    CommandStationStatusReport: {
      $type: "CommandStationStatusReport";
    } & Omit<components["schemas"]["ICbusOpCode"], "$type"> & ({
      message?: components["schemas"]["ICbusStandardMessage"];
      /** Format: int32 */
      dataLength?: number;
      code?: string | null;
      description?: string | null;
      group?: components["schemas"]["OpCodeGroup"];
      name?: string | null;
      /** Format: int32 */
      number?: number;
      /** Format: int32 */
      priority?: number;
      /** Format: int32 */
      nodeNumber?: number;
      /** Format: int32 */
      csNumber?: number;
      csFlags?: components["schemas"]["CSFlagsEnum"];
      /** Format: int32 */
      major?: number;
      /** Format: int32 */
      minor?: number;
      /** Format: int32 */
      build?: number;
    });
    ConnectionOptions: {
      connectionType?: components["schemas"]["ConnectionTypes"];
      serialPort?: components["schemas"]["SerialPortTransportSettings"];
      tcp?: components["schemas"]["TcpTransportSettings"];
    };
    /**
     * Format: int32 
     * @example 0: SerialPort, 1: Tcp 
     * @enum {integer}
     */
    ConnectionTypes: 0 | 1;
    ConsistEngine: {
      $type: "ConsistEngine";
    } & Omit<components["schemas"]["ICbusOpCode"], "$type"> & ({
      message?: components["schemas"]["ICbusStandardMessage"];
      /** Format: int32 */
      dataLength?: number;
      code?: string | null;
      description?: string | null;
      group?: components["schemas"]["OpCodeGroup"];
      name?: string | null;
      /** Format: int32 */
      number?: number;
      /** Format: int32 */
      priority?: number;
      /** Format: int32 */
      consist?: number;
      /** Format: int32 */
      session?: number;
    });
    /**
     * Format: int32 
     * @example 1: HardwareError, 2: TrackError, 4: TrackOnOff, 8: BusOnHalted, 16: EmStopAllPerformed, 32: ResetDone, 64: ServiceModeOnOff 
     * @enum {integer}
     */
    CSFlagsEnum: 1 | 2 | 4 | 8 | 16 | 32 | 64;
    /**
     * Format: int32 
     * @example 1: LocoStackFull, 2: LocoAddrTaken, 3: SessionNotPresent, 4: ConsistEmpty, 5: LocoNotFound, 6: CanBusError, 7: InvalidRequest, 8: SessionCancelled 
     * @enum {integer}
     */
    DccErrorCodeEnum: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8;
    DebugWithOneDataByte: {
      $type: "DebugWithOneDataByte";
    } & Omit<components["schemas"]["ICbusOpCode"], "$type"> & ({
      message?: components["schemas"]["ICbusStandardMessage"];
      /** Format: int32 */
      dataLength?: number;
      code?: string | null;
      description?: string | null;
      group?: components["schemas"]["OpCodeGroup"];
      name?: string | null;
      /** Format: int32 */
      number?: number;
      /** Format: int32 */
      priority?: number;
      /** Format: int32 */
      debugStatus?: number;
    });
    DeviceDataEventShortMode: {
      $type: "DeviceDataEventShortMode";
    } & Omit<components["schemas"]["ICbusOpCode"], "$type"> & ({
      message?: components["schemas"]["ICbusStandardMessage"];
      /** Format: int32 */
      dataLength?: number;
      code?: string | null;
      description?: string | null;
      group?: components["schemas"]["OpCodeGroup"];
      name?: string | null;
      /** Format: int32 */
      number?: number;
      /** Format: int32 */
      priority?: number;
      /** Format: int32 */
      deviceNumber?: number;
      /** Format: int32 */
      data1?: number;
      /** Format: int32 */
      data2?: number;
      /** Format: int32 */
      data3?: number;
      /** Format: int32 */
      data4?: number;
      /** Format: int32 */
      data5?: number;
    });
    DeviceDataResponseShortMode: {
      $type: "DeviceDataResponseShortMode";
    } & Omit<components["schemas"]["ICbusOpCode"], "$type"> & ({
      message?: components["schemas"]["ICbusStandardMessage"];
      /** Format: int32 */
      dataLength?: number;
      code?: string | null;
      description?: string | null;
      group?: components["schemas"]["OpCodeGroup"];
      name?: string | null;
      /** Format: int32 */
      number?: number;
      /** Format: int32 */
      priority?: number;
      /** Format: int32 */
      deviceNumber?: number;
      /** Format: int32 */
      data1?: number;
      /** Format: int32 */
      data2?: number;
      /** Format: int32 */
      data3?: number;
      /** Format: int32 */
      data4?: number;
      /** Format: int32 */
      data5?: number;
    });
    EmergencyStop: {
      $type: "EmergencyStop";
    } & Omit<components["schemas"]["ICbusOpCode"], "$type"> & ({
      message?: components["schemas"]["ICbusStandardMessage"];
      /** Format: int32 */
      dataLength?: number;
      code?: string | null;
      description?: string | null;
      group?: components["schemas"]["OpCodeGroup"];
      name?: string | null;
      /** Format: int32 */
      number?: number;
      /** Format: int32 */
      priority?: number;
    });
    EngineReport: {
      $type: "EngineReport";
    } & Omit<components["schemas"]["ICbusOpCode"], "$type"> & ({
      message?: components["schemas"]["ICbusStandardMessage"];
      /** Format: int32 */
      dataLength?: number;
      code?: string | null;
      description?: string | null;
      group?: components["schemas"]["OpCodeGroup"];
      name?: string | null;
      /** Format: int32 */
      number?: number;
      /** Format: int32 */
      priority?: number;
      /** Format: int32 */
      session?: number;
      /** Format: int32 */
      address?: number;
      /** Format: int32 */
      speedDir?: number;
      /** Format: int32 */
      fn1?: number;
      /** Format: int32 */
      fn2?: number;
      /** Format: int32 */
      fn3?: number;
    });
    /**
     * Format: int32 
     * @example 1: Active, 2: Consisted, 4: ConsistMaster, 8: Inactive 
     * @enum {integer}
     */
    EngineStateEnum: 1 | 2 | 4 | 8;
    ErrorMessagesFromNodesDuringConfiguration: {
      $type: "ErrorMessagesFromNodesDuringConfiguration";
    } & Omit<components["schemas"]["ICbusOpCode"], "$type"> & ({
      message?: components["schemas"]["ICbusStandardMessage"];
      /** Format: int32 */
      dataLength?: number;
      code?: string | null;
      description?: string | null;
      group?: components["schemas"]["OpCodeGroup"];
      name?: string | null;
      /** Format: int32 */
      number?: number;
      /** Format: int32 */
      priority?: number;
      /** Format: int32 */
      nodeNumber?: number;
      accErrorCode?: components["schemas"]["AccErrorCodeEnum"];
    });
    EventSpaceLeftReplyFromNode: {
      $type: "EventSpaceLeftReplyFromNode";
    } & Omit<components["schemas"]["ICbusOpCode"], "$type"> & ({
      message?: components["schemas"]["ICbusStandardMessage"];
      /** Format: int32 */
      dataLength?: number;
      code?: string | null;
      description?: string | null;
      group?: components["schemas"]["OpCodeGroup"];
      name?: string | null;
      /** Format: int32 */
      number?: number;
      /** Format: int32 */
      priority?: number;
      /** Format: int32 */
      nodeNumber?: number;
      /** Format: int32 */
      value?: number;
    });
    ExtendedOpcodeWith1DataByte: {
      $type: "ExtendedOpcodeWith1DataByte";
    } & Omit<components["schemas"]["ICbusOpCode"], "$type"> & ({
      message?: components["schemas"]["ICbusStandardMessage"];
      /** Format: int32 */
      dataLength?: number;
      code?: string | null;
      description?: string | null;
      group?: components["schemas"]["OpCodeGroup"];
      name?: string | null;
      /** Format: int32 */
      number?: number;
      /** Format: int32 */
      priority?: number;
      /** Format: int32 */
      extendedOpCode?: number;
      /** Format: int32 */
      data1?: number;
    });
    ExtendedOpcodeWith2DataBytes: {
      $type: "ExtendedOpcodeWith2DataBytes";
    } & Omit<components["schemas"]["ICbusOpCode"], "$type"> & ({
      message?: components["schemas"]["ICbusStandardMessage"];
      /** Format: int32 */
      dataLength?: number;
      code?: string | null;
      description?: string | null;
      group?: components["schemas"]["OpCodeGroup"];
      name?: string | null;
      /** Format: int32 */
      number?: number;
      /** Format: int32 */
      priority?: number;
      /** Format: int32 */
      extendedOpCode?: number;
      /** Format: int32 */
      data1?: number;
      /** Format: int32 */
      data2?: number;
    });
    ExtendedOpcodeWith3DataBytes: {
      $type: "ExtendedOpcodeWith3DataBytes";
    } & Omit<components["schemas"]["ICbusOpCode"], "$type"> & ({
      message?: components["schemas"]["ICbusStandardMessage"];
      /** Format: int32 */
      dataLength?: number;
      code?: string | null;
      description?: string | null;
      group?: components["schemas"]["OpCodeGroup"];
      name?: string | null;
      /** Format: int32 */
      number?: number;
      /** Format: int32 */
      priority?: number;
      /** Format: int32 */
      extendedOpCode?: number;
      /** Format: int32 */
      data1?: number;
      /** Format: int32 */
      data2?: number;
      /** Format: int32 */
      data3?: number;
    });
    ExtendedOpcodeWith4DataBytes: {
      $type: "ExtendedOpcodeWith4DataBytes";
    } & Omit<components["schemas"]["ICbusOpCode"], "$type"> & ({
      message?: components["schemas"]["ICbusStandardMessage"];
      /** Format: int32 */
      dataLength?: number;
      code?: string | null;
      description?: string | null;
      group?: components["schemas"]["OpCodeGroup"];
      name?: string | null;
      /** Format: int32 */
      number?: number;
      /** Format: int32 */
      priority?: number;
      /** Format: int32 */
      extendedOpCode?: number;
      /** Format: int32 */
      data1?: number;
      /** Format: int32 */
      data2?: number;
      /** Format: int32 */
      data3?: number;
      /** Format: int32 */
      data4?: number;
    });
    ExtendedOpcodeWith5DataBytes: {
      $type: "ExtendedOpcodeWith5DataBytes";
    } & Omit<components["schemas"]["ICbusOpCode"], "$type"> & ({
      message?: components["schemas"]["ICbusStandardMessage"];
      /** Format: int32 */
      dataLength?: number;
      code?: string | null;
      description?: string | null;
      group?: components["schemas"]["OpCodeGroup"];
      name?: string | null;
      /** Format: int32 */
      number?: number;
      /** Format: int32 */
      priority?: number;
      /** Format: int32 */
      extendedOpCode?: number;
      /** Format: int32 */
      data1?: number;
      /** Format: int32 */
      data2?: number;
      /** Format: int32 */
      data3?: number;
      /** Format: int32 */
      data4?: number;
      /** Format: int32 */
      data5?: number;
    });
    ExtendedOpcodeWith6DataBytes: {
      $type: "ExtendedOpcodeWith6DataBytes";
    } & Omit<components["schemas"]["ICbusOpCode"], "$type"> & ({
      message?: components["schemas"]["ICbusStandardMessage"];
      /** Format: int32 */
      dataLength?: number;
      code?: string | null;
      description?: string | null;
      group?: components["schemas"]["OpCodeGroup"];
      name?: string | null;
      /** Format: int32 */
      number?: number;
      /** Format: int32 */
      priority?: number;
      /** Format: int32 */
      extendedOpCode?: number;
      /** Format: int32 */
      data1?: number;
      /** Format: int32 */
      data2?: number;
      /** Format: int32 */
      data3?: number;
      /** Format: int32 */
      data4?: number;
      /** Format: int32 */
      data5?: number;
      /** Format: int32 */
      data6?: number;
    });
    ExtendedOpcodeWithNoDataBytes: {
      $type: "ExtendedOpcodeWithNoDataBytes";
    } & Omit<components["schemas"]["ICbusOpCode"], "$type"> & ({
      message?: components["schemas"]["ICbusStandardMessage"];
      /** Format: int32 */
      dataLength?: number;
      code?: string | null;
      description?: string | null;
      group?: components["schemas"]["OpCodeGroup"];
      name?: string | null;
      /** Format: int32 */
      number?: number;
      /** Format: int32 */
      priority?: number;
      /** Format: int32 */
      extendedOpCode?: number;
    });
    FastClock: {
      $type: "FastClock";
    } & Omit<components["schemas"]["ICbusOpCode"], "$type"> & ({
      message?: components["schemas"]["ICbusStandardMessage"];
      /** Format: int32 */
      dataLength?: number;
      code?: string | null;
      description?: string | null;
      group?: components["schemas"]["OpCodeGroup"];
      name?: string | null;
      /** Format: int32 */
      number?: number;
      /** Format: int32 */
      priority?: number;
      /** Format: int32 */
      minutes?: number;
      /** Format: int32 */
      hours?: number;
      weekday?: components["schemas"]["WeekdayEnum"];
      month?: components["schemas"]["MonthEnum"];
      /** Format: int32 */
      div?: number;
      /** Format: int32 */
      monthDay?: number;
      /** Format: int32 */
      temperature?: number;
    });
    ForceASelfEnumerationCycleForUseWithCan: {
      $type: "ForceASelfEnumerationCycleForUseWithCan";
    } & Omit<components["schemas"]["ICbusOpCode"], "$type"> & ({
      message?: components["schemas"]["ICbusStandardMessage"];
      /** Format: int32 */
      dataLength?: number;
      code?: string | null;
      description?: string | null;
      group?: components["schemas"]["OpCodeGroup"];
      name?: string | null;
      /** Format: int32 */
      number?: number;
      /** Format: int32 */
      priority?: number;
      /** Format: int32 */
      nodeNumber?: number;
    });
    /**
     * Format: int32 
     * @example 1: F0toF4, 2: F5toF8, 3: F9toF12, 4: F13toF20, 5: F21toF28 
     * @enum {integer}
     */
    FunctionRangeEnum: 1 | 2 | 3 | 4 | 5;
    GeneralAcknowledgement: {
      $type: "GeneralAcknowledgement";
    } & Omit<components["schemas"]["ICbusOpCode"], "$type"> & ({
      message?: components["schemas"]["ICbusStandardMessage"];
      /** Format: int32 */
      dataLength?: number;
      code?: string | null;
      description?: string | null;
      group?: components["schemas"]["OpCodeGroup"];
      name?: string | null;
      /** Format: int32 */
      number?: number;
      /** Format: int32 */
      priority?: number;
    });
    GeneralNoAcknowledgement: {
      $type: "GeneralNoAcknowledgement";
    } & Omit<components["schemas"]["ICbusOpCode"], "$type"> & ({
      message?: components["schemas"]["ICbusStandardMessage"];
      /** Format: int32 */
      dataLength?: number;
      code?: string | null;
      description?: string | null;
      group?: components["schemas"]["OpCodeGroup"];
      name?: string | null;
      /** Format: int32 */
      number?: number;
      /** Format: int32 */
      priority?: number;
    });
    GetEngineSession: {
      $type: "GetEngineSession";
    } & Omit<components["schemas"]["ICbusOpCode"], "$type"> & ({
      message?: components["schemas"]["ICbusStandardMessage"];
      /** Format: int32 */
      dataLength?: number;
      code?: string | null;
      description?: string | null;
      group?: components["schemas"]["OpCodeGroup"];
      name?: string | null;
      /** Format: int32 */
      number?: number;
      /** Format: int32 */
      priority?: number;
      /** Format: int32 */
      address?: number;
      sessionFlags?: components["schemas"]["SessionFlagsEnum"];
    });
    ICbusOpCode: {
      code?: string | null;
      /** Format: int32 */
      dataLength?: number;
      description?: string | null;
      group?: components["schemas"]["OpCodeGroup"];
      name?: string | null;
      /** Format: int32 */
      number?: number;
      /** Format: int32 */
      priority?: number;
      message?: components["schemas"]["ICbusStandardMessage"];
      /** @default Asgard.Data.ICbusOpCode */
      $type: string;
    };
    ICbusStandardMessage: {
      isExtended?: boolean;
      /** Format: int32 */
      length?: number;
    };
    "IErrorReplyTo`1": {
      $type: "IErrorReplyTo`1";
    } & Omit<components["schemas"]["ICbusOpCode"], "$type"> & ({
      code?: string | null;
      /** Format: int32 */
      dataLength?: number;
      description?: string | null;
      group?: components["schemas"]["OpCodeGroup"];
      name?: string | null;
      /** Format: int32 */
      number?: number;
      /** Format: int32 */
      priority?: number;
      message?: components["schemas"]["ICbusStandardMessage"];
    });
    "IReplyTo`1": {
      $type: "IReplyTo`1";
    } & Omit<components["schemas"]["ICbusOpCode"], "$type"> & ({
      code?: string | null;
      /** Format: int32 */
      dataLength?: number;
      description?: string | null;
      group?: components["schemas"]["OpCodeGroup"];
      name?: string | null;
      /** Format: int32 */
      number?: number;
      /** Format: int32 */
      priority?: number;
      message?: components["schemas"]["ICbusStandardMessage"];
    });
    /**
     * Format: int32 
     * @example 1: Jan, 2: Feb, 3: Mar, 4: Apr, 5: May, 6: Jun, 7: Jul, 8: Aug, 9: Sep, 10: Oct, 11: Nov, 12: Dec 
     * @enum {integer}
     */
    MonthEnum: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12;
    /**
     * Format: int32 
     * @example 1: Consumer, 2: Producer, 4: FLiMMode, 8: BootloadingSupported 
     * @enum {integer}
     */
    NodeFlagsEnum: 1 | 2 | 4 | 8;
    NodeNumberAcknowledge: {
      $type: "NodeNumberAcknowledge";
    } & Omit<components["schemas"]["ICbusOpCode"], "$type"> & ({
      message?: components["schemas"]["ICbusStandardMessage"];
      /** Format: int32 */
      dataLength?: number;
      code?: string | null;
      description?: string | null;
      group?: components["schemas"]["OpCodeGroup"];
      name?: string | null;
      /** Format: int32 */
      number?: number;
      /** Format: int32 */
      priority?: number;
      /** Format: int32 */
      nodeNumber?: number;
    });
    NodeNumberRelease: {
      $type: "NodeNumberRelease";
    } & Omit<components["schemas"]["ICbusOpCode"], "$type"> & ({
      message?: components["schemas"]["ICbusStandardMessage"];
      /** Format: int32 */
      dataLength?: number;
      code?: string | null;
      description?: string | null;
      group?: components["schemas"]["OpCodeGroup"];
      name?: string | null;
      /** Format: int32 */
      number?: number;
      /** Format: int32 */
      priority?: number;
      /** Format: int32 */
      nodeNumber?: number;
    });
    NumberOfEventsStoredInNode: {
      $type: "NumberOfEventsStoredInNode";
    } & Omit<components["schemas"]["ICbusOpCode"], "$type"> & ({
      message?: components["schemas"]["ICbusStandardMessage"];
      /** Format: int32 */
      dataLength?: number;
      code?: string | null;
      description?: string | null;
      group?: components["schemas"]["OpCodeGroup"];
      name?: string | null;
      /** Format: int32 */
      number?: number;
      /** Format: int32 */
      priority?: number;
      /** Format: int32 */
      nodeNumber?: number;
      /** Format: int32 */
      value?: number;
    });
    OpCodeData: {
      $type: "OpCodeData";
    } & Omit<components["schemas"]["ICbusOpCode"], "$type"> & ({
      code?: string | null;
      description?: string | null;
      group?: components["schemas"]["OpCodeGroup"];
      name?: string | null;
      /** Format: int32 */
      number?: number;
      /** Format: int32 */
      priority?: number;
      /** Format: int32 */
      dataLength?: number;
      message?: components["schemas"]["ICbusStandardMessage"];
    });
    OpCodeData0: {
      $type: "OpCodeData0";
    } & Omit<components["schemas"]["ICbusOpCode"], "$type"> & ({
      code?: string | null;
      description?: string | null;
      group?: components["schemas"]["OpCodeGroup"];
      name?: string | null;
      /** Format: int32 */
      number?: number;
      /** Format: int32 */
      priority?: number;
      message?: components["schemas"]["ICbusStandardMessage"];
      /** Format: int32 */
      dataLength?: number;
    });
    OpCodeData1: {
      $type: "OpCodeData1";
    } & Omit<components["schemas"]["ICbusOpCode"], "$type"> & ({
      code?: string | null;
      description?: string | null;
      group?: components["schemas"]["OpCodeGroup"];
      name?: string | null;
      /** Format: int32 */
      number?: number;
      /** Format: int32 */
      priority?: number;
      message?: components["schemas"]["ICbusStandardMessage"];
      /** Format: int32 */
      dataLength?: number;
    });
    OpCodeData2: {
      $type: "OpCodeData2";
    } & Omit<components["schemas"]["ICbusOpCode"], "$type"> & ({
      code?: string | null;
      description?: string | null;
      group?: components["schemas"]["OpCodeGroup"];
      name?: string | null;
      /** Format: int32 */
      number?: number;
      /** Format: int32 */
      priority?: number;
      message?: components["schemas"]["ICbusStandardMessage"];
      /** Format: int32 */
      dataLength?: number;
    });
    OpCodeData3: {
      $type: "OpCodeData3";
    } & Omit<components["schemas"]["ICbusOpCode"], "$type"> & ({
      code?: string | null;
      description?: string | null;
      group?: components["schemas"]["OpCodeGroup"];
      name?: string | null;
      /** Format: int32 */
      number?: number;
      /** Format: int32 */
      priority?: number;
      message?: components["schemas"]["ICbusStandardMessage"];
      /** Format: int32 */
      dataLength?: number;
    });
    OpCodeData4: {
      $type: "OpCodeData4";
    } & Omit<components["schemas"]["ICbusOpCode"], "$type"> & ({
      code?: string | null;
      description?: string | null;
      group?: components["schemas"]["OpCodeGroup"];
      name?: string | null;
      /** Format: int32 */
      number?: number;
      /** Format: int32 */
      priority?: number;
      message?: components["schemas"]["ICbusStandardMessage"];
      /** Format: int32 */
      dataLength?: number;
    });
    OpCodeData5: {
      $type: "OpCodeData5";
    } & Omit<components["schemas"]["ICbusOpCode"], "$type"> & ({
      code?: string | null;
      description?: string | null;
      group?: components["schemas"]["OpCodeGroup"];
      name?: string | null;
      /** Format: int32 */
      number?: number;
      /** Format: int32 */
      priority?: number;
      message?: components["schemas"]["ICbusStandardMessage"];
      /** Format: int32 */
      dataLength?: number;
    });
    OpCodeData6: {
      $type: "OpCodeData6";
    } & Omit<components["schemas"]["ICbusOpCode"], "$type"> & ({
      code?: string | null;
      description?: string | null;
      group?: components["schemas"]["OpCodeGroup"];
      name?: string | null;
      /** Format: int32 */
      number?: number;
      /** Format: int32 */
      priority?: number;
      message?: components["schemas"]["ICbusStandardMessage"];
      /** Format: int32 */
      dataLength?: number;
    });
    OpCodeData7: {
      $type: "OpCodeData7";
    } & Omit<components["schemas"]["ICbusOpCode"], "$type"> & ({
      code?: string | null;
      description?: string | null;
      group?: components["schemas"]["OpCodeGroup"];
      name?: string | null;
      /** Format: int32 */
      number?: number;
      /** Format: int32 */
      priority?: number;
      message?: components["schemas"]["ICbusStandardMessage"];
      /** Format: int32 */
      dataLength?: number;
    });
    /**
     * Format: int32 
     * @example 0: Unknown, 1: Accessory, 2: Config, 3: DCC, 4: General, 5: Extended 
     * @enum {integer}
     */
    OpCodeGroup: 0 | 1 | 2 | 3 | 4 | 5;
    PutNodeIntoBootloadMode: {
      $type: "PutNodeIntoBootloadMode";
    } & Omit<components["schemas"]["ICbusOpCode"], "$type"> & ({
      message?: components["schemas"]["ICbusStandardMessage"];
      /** Format: int32 */
      dataLength?: number;
      code?: string | null;
      description?: string | null;
      group?: components["schemas"]["OpCodeGroup"];
      name?: string | null;
      /** Format: int32 */
      number?: number;
      /** Format: int32 */
      priority?: number;
      /** Format: int32 */
      nodeNumber?: number;
    });
    QueryConsist: {
      $type: "QueryConsist";
    } & Omit<components["schemas"]["ICbusOpCode"], "$type"> & ({
      message?: components["schemas"]["ICbusStandardMessage"];
      /** Format: int32 */
      dataLength?: number;
      code?: string | null;
      description?: string | null;
      group?: components["schemas"]["OpCodeGroup"];
      name?: string | null;
      /** Format: int32 */
      number?: number;
      /** Format: int32 */
      priority?: number;
      /** Format: int32 */
      consist?: number;
      /** Format: int32 */
      index?: number;
    });
    QueryEngine: {
      $type: "QueryEngine";
    } & Omit<components["schemas"]["ICbusOpCode"], "$type"> & ({
      message?: components["schemas"]["ICbusStandardMessage"];
      /** Format: int32 */
      dataLength?: number;
      code?: string | null;
      description?: string | null;
      group?: components["schemas"]["OpCodeGroup"];
      name?: string | null;
      /** Format: int32 */
      number?: number;
      /** Format: int32 */
      priority?: number;
      /** Format: int32 */
      session?: number;
    });
    QueryNodeNumber: {
      $type: "QueryNodeNumber";
    } & Omit<components["schemas"]["ICbusOpCode"], "$type"> & ({
      message?: components["schemas"]["ICbusStandardMessage"];
      /** Format: int32 */
      dataLength?: number;
      code?: string | null;
      description?: string | null;
      group?: components["schemas"]["OpCodeGroup"];
      name?: string | null;
      /** Format: int32 */
      number?: number;
      /** Format: int32 */
      priority?: number;
    });
    ReadBackAllStoredEventsInANode: {
      $type: "ReadBackAllStoredEventsInANode";
    } & Omit<components["schemas"]["ICbusOpCode"], "$type"> & ({
      message?: components["schemas"]["ICbusStandardMessage"];
      /** Format: int32 */
      dataLength?: number;
      code?: string | null;
      description?: string | null;
      group?: components["schemas"]["OpCodeGroup"];
      name?: string | null;
      /** Format: int32 */
      number?: number;
      /** Format: int32 */
      priority?: number;
      /** Format: int32 */
      nodeNumber?: number;
    });
    ReadCv: {
      $type: "ReadCv";
    } & Omit<components["schemas"]["ICbusOpCode"], "$type"> & ({
      message?: components["schemas"]["ICbusStandardMessage"];
      /** Format: int32 */
      dataLength?: number;
      code?: string | null;
      description?: string | null;
      group?: components["schemas"]["OpCodeGroup"];
      name?: string | null;
      /** Format: int32 */
      number?: number;
      /** Format: int32 */
      priority?: number;
      /** Format: int32 */
      session?: number;
      /** Format: int32 */
      cv?: number;
      serviceMode?: components["schemas"]["ServiceModeEnum"];
    });
    ReadEventVariableInLearnMode: {
      $type: "ReadEventVariableInLearnMode";
    } & Omit<components["schemas"]["ICbusOpCode"], "$type"> & ({
      message?: components["schemas"]["ICbusStandardMessage"];
      /** Format: int32 */
      dataLength?: number;
      code?: string | null;
      description?: string | null;
      group?: components["schemas"]["OpCodeGroup"];
      name?: string | null;
      /** Format: int32 */
      number?: number;
      /** Format: int32 */
      priority?: number;
      /** Format: int32 */
      nodeNumber?: number;
      /** Format: int32 */
      eventNumber?: number;
      /** Format: int32 */
      evIndex?: number;
    });
    ReadNumberOfEventsAvailableInANode: {
      $type: "ReadNumberOfEventsAvailableInANode";
    } & Omit<components["schemas"]["ICbusOpCode"], "$type"> & ({
      message?: components["schemas"]["ICbusStandardMessage"];
      /** Format: int32 */
      dataLength?: number;
      code?: string | null;
      description?: string | null;
      group?: components["schemas"]["OpCodeGroup"];
      name?: string | null;
      /** Format: int32 */
      number?: number;
      /** Format: int32 */
      priority?: number;
      /** Format: int32 */
      nodeNumber?: number;
    });
    ReleaseEngine: {
      $type: "ReleaseEngine";
    } & Omit<components["schemas"]["ICbusOpCode"], "$type"> & ({
      message?: components["schemas"]["ICbusStandardMessage"];
      /** Format: int32 */
      dataLength?: number;
      code?: string | null;
      description?: string | null;
      group?: components["schemas"]["OpCodeGroup"];
      name?: string | null;
      /** Format: int32 */
      number?: number;
      /** Format: int32 */
      priority?: number;
      /** Format: int32 */
      session?: number;
    });
    ReleaseNodeFromLearnMode: {
      $type: "ReleaseNodeFromLearnMode";
    } & Omit<components["schemas"]["ICbusOpCode"], "$type"> & ({
      message?: components["schemas"]["ICbusStandardMessage"];
      /** Format: int32 */
      dataLength?: number;
      code?: string | null;
      description?: string | null;
      group?: components["schemas"]["OpCodeGroup"];
      name?: string | null;
      /** Format: int32 */
      number?: number;
      /** Format: int32 */
      priority?: number;
      /** Format: int32 */
      nodeNumber?: number;
    });
    RemoveEngineFromConsist: {
      $type: "RemoveEngineFromConsist";
    } & Omit<components["schemas"]["ICbusOpCode"], "$type"> & ({
      message?: components["schemas"]["ICbusStandardMessage"];
      /** Format: int32 */
      dataLength?: number;
      code?: string | null;
      description?: string | null;
      group?: components["schemas"]["OpCodeGroup"];
      name?: string | null;
      /** Format: int32 */
      number?: number;
      /** Format: int32 */
      priority?: number;
      /** Format: int32 */
      consist?: number;
      /** Format: int32 */
      session?: number;
    });
    ReportCv: {
      $type: "ReportCv";
    } & Omit<components["schemas"]["ICbusOpCode"], "$type"> & ({
      message?: components["schemas"]["ICbusStandardMessage"];
      /** Format: int32 */
      dataLength?: number;
      code?: string | null;
      description?: string | null;
      group?: components["schemas"]["OpCodeGroup"];
      name?: string | null;
      /** Format: int32 */
      number?: number;
      /** Format: int32 */
      priority?: number;
      /** Format: int32 */
      session?: number;
      /** Format: int32 */
      cv?: number;
      /** Format: int32 */
      value?: number;
    });
    Request3ByteDccPacket: {
      $type: "Request3ByteDccPacket";
    } & Omit<components["schemas"]["ICbusOpCode"], "$type"> & ({
      message?: components["schemas"]["ICbusStandardMessage"];
      /** Format: int32 */
      dataLength?: number;
      code?: string | null;
      description?: string | null;
      group?: components["schemas"]["OpCodeGroup"];
      name?: string | null;
      /** Format: int32 */
      number?: number;
      /** Format: int32 */
      priority?: number;
      /** Format: int32 */
      repetitions?: number;
      /** Format: int32 */
      data1?: number;
      /** Format: int32 */
      data2?: number;
      /** Format: int32 */
      data3?: number;
    });
    Request4ByteDccPacket: {
      $type: "Request4ByteDccPacket";
    } & Omit<components["schemas"]["ICbusOpCode"], "$type"> & ({
      message?: components["schemas"]["ICbusStandardMessage"];
      /** Format: int32 */
      dataLength?: number;
      code?: string | null;
      description?: string | null;
      group?: components["schemas"]["OpCodeGroup"];
      name?: string | null;
      /** Format: int32 */
      number?: number;
      /** Format: int32 */
      priority?: number;
      /** Format: int32 */
      repetitions?: number;
      /** Format: int32 */
      data1?: number;
      /** Format: int32 */
      data2?: number;
      /** Format: int32 */
      data3?: number;
      /** Format: int32 */
      data4?: number;
    });
    Request5ByteDccPacket: {
      $type: "Request5ByteDccPacket";
    } & Omit<components["schemas"]["ICbusOpCode"], "$type"> & ({
      message?: components["schemas"]["ICbusStandardMessage"];
      /** Format: int32 */
      dataLength?: number;
      code?: string | null;
      description?: string | null;
      group?: components["schemas"]["OpCodeGroup"];
      name?: string | null;
      /** Format: int32 */
      number?: number;
      /** Format: int32 */
      priority?: number;
      /** Format: int32 */
      repetitions?: number;
      /** Format: int32 */
      data1?: number;
      /** Format: int32 */
      data2?: number;
      /** Format: int32 */
      data3?: number;
      /** Format: int32 */
      data4?: number;
      /** Format: int32 */
      data5?: number;
    });
    Request6ByteDccPacket: {
      $type: "Request6ByteDccPacket";
    } & Omit<components["schemas"]["ICbusOpCode"], "$type"> & ({
      message?: components["schemas"]["ICbusStandardMessage"];
      /** Format: int32 */
      dataLength?: number;
      code?: string | null;
      description?: string | null;
      group?: components["schemas"]["OpCodeGroup"];
      name?: string | null;
      /** Format: int32 */
      number?: number;
      /** Format: int32 */
      priority?: number;
      /** Format: int32 */
      repetitions?: number;
      /** Format: int32 */
      data1?: number;
      /** Format: int32 */
      data2?: number;
      /** Format: int32 */
      data3?: number;
      /** Format: int32 */
      data4?: number;
      /** Format: int32 */
      data5?: number;
      /** Format: int32 */
      data6?: number;
    });
    RequestCommandStationStatus: {
      $type: "RequestCommandStationStatus";
    } & Omit<components["schemas"]["ICbusOpCode"], "$type"> & ({
      message?: components["schemas"]["ICbusStandardMessage"];
      /** Format: int32 */
      dataLength?: number;
      code?: string | null;
      description?: string | null;
      group?: components["schemas"]["OpCodeGroup"];
      name?: string | null;
      /** Format: int32 */
      number?: number;
      /** Format: int32 */
      priority?: number;
    });
    RequestDeviceDataShortMode: {
      $type: "RequestDeviceDataShortMode";
    } & Omit<components["schemas"]["ICbusOpCode"], "$type"> & ({
      message?: components["schemas"]["ICbusStandardMessage"];
      /** Format: int32 */
      dataLength?: number;
      code?: string | null;
      description?: string | null;
      group?: components["schemas"]["OpCodeGroup"];
      name?: string | null;
      /** Format: int32 */
      number?: number;
      /** Format: int32 */
      priority?: number;
      /** Format: int32 */
      deviceNumber?: number;
    });
    RequestEmergencyStopAll: {
      $type: "RequestEmergencyStopAll";
    } & Omit<components["schemas"]["ICbusOpCode"], "$type"> & ({
      message?: components["schemas"]["ICbusStandardMessage"];
      /** Format: int32 */
      dataLength?: number;
      code?: string | null;
      description?: string | null;
      group?: components["schemas"]["OpCodeGroup"];
      name?: string | null;
      /** Format: int32 */
      number?: number;
      /** Format: int32 */
      priority?: number;
    });
    RequestEngineSession: {
      $type: "RequestEngineSession";
    } & Omit<components["schemas"]["ICbusOpCode"], "$type"> & ({
      message?: components["schemas"]["ICbusStandardMessage"];
      /** Format: int32 */
      dataLength?: number;
      code?: string | null;
      description?: string | null;
      group?: components["schemas"]["OpCodeGroup"];
      name?: string | null;
      /** Format: int32 */
      number?: number;
      /** Format: int32 */
      priority?: number;
      /** Format: int32 */
      address?: number;
    });
    RequestForReadOfAnEventVariable: {
      $type: "RequestForReadOfAnEventVariable";
    } & Omit<components["schemas"]["ICbusOpCode"], "$type"> & ({
      message?: components["schemas"]["ICbusStandardMessage"];
      /** Format: int32 */
      dataLength?: number;
      code?: string | null;
      description?: string | null;
      group?: components["schemas"]["OpCodeGroup"];
      name?: string | null;
      /** Format: int32 */
      number?: number;
      /** Format: int32 */
      priority?: number;
      /** Format: int32 */
      nodeNumber?: number;
      /** Format: int32 */
      enIndex?: number;
      /** Format: int32 */
      evIndex?: number;
    });
    RequestModuleName: {
      $type: "RequestModuleName";
    } & Omit<components["schemas"]["ICbusOpCode"], "$type"> & ({
      message?: components["schemas"]["ICbusStandardMessage"];
      /** Format: int32 */
      dataLength?: number;
      code?: string | null;
      description?: string | null;
      group?: components["schemas"]["OpCodeGroup"];
      name?: string | null;
      /** Format: int32 */
      number?: number;
      /** Format: int32 */
      priority?: number;
    });
    RequestNodeDataEvent: {
      $type: "RequestNodeDataEvent";
    } & Omit<components["schemas"]["ICbusOpCode"], "$type"> & ({
      message?: components["schemas"]["ICbusStandardMessage"];
      /** Format: int32 */
      dataLength?: number;
      code?: string | null;
      description?: string | null;
      group?: components["schemas"]["OpCodeGroup"];
      name?: string | null;
      /** Format: int32 */
      number?: number;
      /** Format: int32 */
      priority?: number;
      /** Format: int32 */
      nodeNumber?: number;
    });
    RequestNodeNumber: {
      $type: "RequestNodeNumber";
    } & Omit<components["schemas"]["ICbusOpCode"], "$type"> & ({
      message?: components["schemas"]["ICbusStandardMessage"];
      /** Format: int32 */
      dataLength?: number;
      code?: string | null;
      description?: string | null;
      group?: components["schemas"]["OpCodeGroup"];
      name?: string | null;
      /** Format: int32 */
      number?: number;
      /** Format: int32 */
      priority?: number;
      /** Format: int32 */
      nodeNumber?: number;
    });
    RequestNodeParameters: {
      $type: "RequestNodeParameters";
    } & Omit<components["schemas"]["ICbusOpCode"], "$type"> & ({
      message?: components["schemas"]["ICbusStandardMessage"];
      /** Format: int32 */
      dataLength?: number;
      code?: string | null;
      description?: string | null;
      group?: components["schemas"]["OpCodeGroup"];
      name?: string | null;
      /** Format: int32 */
      number?: number;
      /** Format: int32 */
      priority?: number;
    });
    RequestReadOfANodeParameterByIndex: {
      $type: "RequestReadOfANodeParameterByIndex";
    } & Omit<components["schemas"]["ICbusOpCode"], "$type"> & ({
      message?: components["schemas"]["ICbusStandardMessage"];
      /** Format: int32 */
      dataLength?: number;
      code?: string | null;
      description?: string | null;
      group?: components["schemas"]["OpCodeGroup"];
      name?: string | null;
      /** Format: int32 */
      number?: number;
      /** Format: int32 */
      priority?: number;
      /** Format: int32 */
      nodeNumber?: number;
      /** Format: int32 */
      paramIndex?: number;
    });
    RequestReadOfANodeVariable: {
      $type: "RequestReadOfANodeVariable";
    } & Omit<components["schemas"]["ICbusOpCode"], "$type"> & ({
      message?: components["schemas"]["ICbusStandardMessage"];
      /** Format: int32 */
      dataLength?: number;
      code?: string | null;
      description?: string | null;
      group?: components["schemas"]["OpCodeGroup"];
      name?: string | null;
      /** Format: int32 */
      number?: number;
      /** Format: int32 */
      priority?: number;
      /** Format: int32 */
      nodeNumber?: number;
      /** Format: int32 */
      nvIndex?: number;
    });
    RequestReadOfStoredEventsByEventIndex: {
      $type: "RequestReadOfStoredEventsByEventIndex";
    } & Omit<components["schemas"]["ICbusOpCode"], "$type"> & ({
      message?: components["schemas"]["ICbusStandardMessage"];
      /** Format: int32 */
      dataLength?: number;
      code?: string | null;
      description?: string | null;
      group?: components["schemas"]["OpCodeGroup"];
      name?: string | null;
      /** Format: int32 */
      number?: number;
      /** Format: int32 */
      priority?: number;
      /** Format: int32 */
      nodeNumber?: number;
      /** Format: int32 */
      enIndex?: number;
    });
    RequestToReadNumberOfStoredEvents: {
      $type: "RequestToReadNumberOfStoredEvents";
    } & Omit<components["schemas"]["ICbusOpCode"], "$type"> & ({
      message?: components["schemas"]["ICbusStandardMessage"];
      /** Format: int32 */
      dataLength?: number;
      code?: string | null;
      description?: string | null;
      group?: components["schemas"]["OpCodeGroup"];
      name?: string | null;
      /** Format: int32 */
      number?: number;
      /** Format: int32 */
      priority?: number;
      /** Format: int32 */
      nodeNumber?: number;
    });
    RequestTrackOff: {
      $type: "RequestTrackOff";
    } & Omit<components["schemas"]["ICbusOpCode"], "$type"> & ({
      message?: components["schemas"]["ICbusStandardMessage"];
      /** Format: int32 */
      dataLength?: number;
      code?: string | null;
      description?: string | null;
      group?: components["schemas"]["OpCodeGroup"];
      name?: string | null;
      /** Format: int32 */
      number?: number;
      /** Format: int32 */
      priority?: number;
    });
    RequestTrackOn: {
      $type: "RequestTrackOn";
    } & Omit<components["schemas"]["ICbusOpCode"], "$type"> & ({
      message?: components["schemas"]["ICbusStandardMessage"];
      /** Format: int32 */
      dataLength?: number;
      code?: string | null;
      description?: string | null;
      group?: components["schemas"]["OpCodeGroup"];
      name?: string | null;
      /** Format: int32 */
      number?: number;
      /** Format: int32 */
      priority?: number;
    });
    ResponseToARequestForAnEvValueInANodeInLearnMode: {
      $type: "ResponseToARequestForAnEvValueInANodeInLearnMode";
    } & Omit<components["schemas"]["ICbusOpCode"], "$type"> & ({
      message?: components["schemas"]["ICbusStandardMessage"];
      /** Format: int32 */
      dataLength?: number;
      code?: string | null;
      description?: string | null;
      group?: components["schemas"]["OpCodeGroup"];
      name?: string | null;
      /** Format: int32 */
      number?: number;
      /** Format: int32 */
      priority?: number;
      /** Format: int32 */
      nodeNumber?: number;
      /** Format: int32 */
      eventNumber?: number;
      /** Format: int32 */
      evIndex?: number;
      /** Format: int32 */
      value?: number;
    });
    ResponseToARequestForANodeVariableValue: {
      $type: "ResponseToARequestForANodeVariableValue";
    } & Omit<components["schemas"]["ICbusOpCode"], "$type"> & ({
      message?: components["schemas"]["ICbusStandardMessage"];
      /** Format: int32 */
      dataLength?: number;
      code?: string | null;
      description?: string | null;
      group?: components["schemas"]["OpCodeGroup"];
      name?: string | null;
      /** Format: int32 */
      number?: number;
      /** Format: int32 */
      priority?: number;
      /** Format: int32 */
      nodeNumber?: number;
      /** Format: int32 */
      nvIndex?: number;
      /** Format: int32 */
      value?: number;
    });
    ResponseToQueryNode: {
      $type: "ResponseToQueryNode";
    } & Omit<components["schemas"]["ICbusOpCode"], "$type"> & ({
      message?: components["schemas"]["ICbusStandardMessage"];
      /** Format: int32 */
      dataLength?: number;
      code?: string | null;
      description?: string | null;
      group?: components["schemas"]["OpCodeGroup"];
      name?: string | null;
      /** Format: int32 */
      number?: number;
      /** Format: int32 */
      priority?: number;
      /** Format: int32 */
      nodeNumber?: number;
      /** Format: int32 */
      manufId?: number;
      /** Format: int32 */
      moduleId?: number;
      nodeFlags?: components["schemas"]["NodeFlagsEnum"];
    });
    ResponseToRequestForIndividualNodeParameter: {
      $type: "ResponseToRequestForIndividualNodeParameter";
    } & Omit<components["schemas"]["ICbusOpCode"], "$type"> & ({
      message?: components["schemas"]["ICbusStandardMessage"];
      /** Format: int32 */
      dataLength?: number;
      code?: string | null;
      description?: string | null;
      group?: components["schemas"]["OpCodeGroup"];
      name?: string | null;
      /** Format: int32 */
      number?: number;
      /** Format: int32 */
      priority?: number;
      /** Format: int32 */
      nodeNumber?: number;
      /** Format: int32 */
      paramIndex?: number;
      /** Format: int32 */
      value?: number;
    });
    ResponseToRequestForNodeNameString: {
      $type: "ResponseToRequestForNodeNameString";
    } & Omit<components["schemas"]["ICbusOpCode"], "$type"> & ({
      message?: components["schemas"]["ICbusStandardMessage"];
      /** Format: int32 */
      dataLength?: number;
      code?: string | null;
      description?: string | null;
      group?: components["schemas"]["OpCodeGroup"];
      name?: string | null;
      /** Format: int32 */
      number?: number;
      /** Format: int32 */
      priority?: number;
      char1?: string;
      char2?: string;
      char3?: string;
      char4?: string;
      char5?: string;
      char6?: string;
      char7?: string;
    });
    ResponseToRequestForNodeParameters: {
      $type: "ResponseToRequestForNodeParameters";
    } & Omit<components["schemas"]["ICbusOpCode"], "$type"> & ({
      message?: components["schemas"]["ICbusStandardMessage"];
      /** Format: int32 */
      dataLength?: number;
      code?: string | null;
      description?: string | null;
      group?: components["schemas"]["OpCodeGroup"];
      name?: string | null;
      /** Format: int32 */
      number?: number;
      /** Format: int32 */
      priority?: number;
      /** Format: int32 */
      param1?: number;
      /** Format: int32 */
      param2?: number;
      /** Format: int32 */
      param3?: number;
      /** Format: int32 */
      param4?: number;
      /** Format: int32 */
      param5?: number;
      /** Format: int32 */
      param6?: number;
      /** Format: int32 */
      param7?: number;
    });
    ResponseToRequestForReadOfEvValue: {
      $type: "ResponseToRequestForReadOfEvValue";
    } & Omit<components["schemas"]["ICbusOpCode"], "$type"> & ({
      message?: components["schemas"]["ICbusStandardMessage"];
      /** Format: int32 */
      dataLength?: number;
      code?: string | null;
      description?: string | null;
      group?: components["schemas"]["OpCodeGroup"];
      name?: string | null;
      /** Format: int32 */
      number?: number;
      /** Format: int32 */
      priority?: number;
      /** Format: int32 */
      nodeNumber?: number;
      /** Format: int32 */
      evIndex?: number;
      /** Format: int32 */
      enIndex?: number;
      /** Format: int32 */
      value?: number;
    });
    ResponseToRequestToReadNodeEvents: {
      $type: "ResponseToRequestToReadNodeEvents";
    } & Omit<components["schemas"]["ICbusOpCode"], "$type"> & ({
      message?: components["schemas"]["ICbusStandardMessage"];
      /** Format: int32 */
      dataLength?: number;
      code?: string | null;
      description?: string | null;
      group?: components["schemas"]["OpCodeGroup"];
      name?: string | null;
      /** Format: int32 */
      number?: number;
      /** Format: int32 */
      priority?: number;
      /** Format: int32 */
      nodeNumber?: number;
      /** Format: int32 */
      eventData?: number;
      /** Format: int32 */
      enIndex?: number;
    });
    SerialPortTransportSettings: {
      portName?: string | null;
      /** Format: int32 */
      baudRate?: number | null;
      /** Format: int32 */
      dataBits?: number | null;
      stopBits?: string | null;
      parity?: string | null;
    };
    /**
     * Format: int32 
     * @example 0: DirectByte, 1: DirectBit, 2: PageMode, 3: RegisterMode, 4: AddressOnlyMode 
     * @enum {integer}
     */
    ServiceModeEnum: 0 | 1 | 2 | 3 | 4;
    ServiceModeStatus: {
      $type: "ServiceModeStatus";
    } & Omit<components["schemas"]["ICbusOpCode"], "$type"> & ({
      message?: components["schemas"]["ICbusStandardMessage"];
      /** Format: int32 */
      dataLength?: number;
      code?: string | null;
      description?: string | null;
      group?: components["schemas"]["OpCodeGroup"];
      name?: string | null;
      /** Format: int32 */
      number?: number;
      /** Format: int32 */
      priority?: number;
      /** Format: int32 */
      session?: number;
      sessionStatus?: components["schemas"]["SessionStatusEnum"];
    });
    /**
     * Format: int32 
     * @example 0: Request, 1: Steal, 2: Share 
     * @enum {integer}
     */
    SessionFlagsEnum: 0 | 1 | 2;
    SessionKeepAlive: {
      $type: "SessionKeepAlive";
    } & Omit<components["schemas"]["ICbusOpCode"], "$type"> & ({
      message?: components["schemas"]["ICbusStandardMessage"];
      /** Format: int32 */
      dataLength?: number;
      code?: string | null;
      description?: string | null;
      group?: components["schemas"]["OpCodeGroup"];
      name?: string | null;
      /** Format: int32 */
      number?: number;
      /** Format: int32 */
      priority?: number;
      /** Format: int32 */
      session?: number;
    });
    /**
     * Format: int32 
     * @example 1: NoAck, 2: OverloadOnService, 3: WriteAck, 4: Busy, 5: CVOutOfRange 
     * @enum {integer}
     */
    SessionStatusEnum: 1 | 2 | 3 | 4 | 5;
    SetACan_idInExistingFlimNode: {
      $type: "SetACan_idInExistingFlimNode";
    } & Omit<components["schemas"]["ICbusOpCode"], "$type"> & ({
      message?: components["schemas"]["ICbusStandardMessage"];
      /** Format: int32 */
      dataLength?: number;
      code?: string | null;
      description?: string | null;
      group?: components["schemas"]["OpCodeGroup"];
      name?: string | null;
      /** Format: int32 */
      number?: number;
      /** Format: int32 */
      priority?: number;
      /** Format: int32 */
      nodeNumber?: number;
      /** Format: int32 */
      caN_ID?: number;
    });
    SetANodeVariable: {
      $type: "SetANodeVariable";
    } & Omit<components["schemas"]["ICbusOpCode"], "$type"> & ({
      message?: components["schemas"]["ICbusStandardMessage"];
      /** Format: int32 */
      dataLength?: number;
      code?: string | null;
      description?: string | null;
      group?: components["schemas"]["OpCodeGroup"];
      name?: string | null;
      /** Format: int32 */
      number?: number;
      /** Format: int32 */
      priority?: number;
      /** Format: int32 */
      nodeNumber?: number;
      /** Format: int32 */
      nvIndex?: number;
      /** Format: int32 */
      value?: number;
    });
    SetCabSessionMode: {
      $type: "SetCabSessionMode";
    } & Omit<components["schemas"]["ICbusOpCode"], "$type"> & ({
      message?: components["schemas"]["ICbusStandardMessage"];
      /** Format: int32 */
      dataLength?: number;
      code?: string | null;
      description?: string | null;
      group?: components["schemas"]["OpCodeGroup"];
      name?: string | null;
      /** Format: int32 */
      number?: number;
      /** Format: int32 */
      priority?: number;
      /** Format: int32 */
      session?: number;
      speedMode?: components["schemas"]["SpeedModeEnum"];
      serviceMode?: components["schemas"]["ServiceModeEnum"];
      soundMode?: boolean;
    });
    SetEngineFlags: {
      $type: "SetEngineFlags";
    } & Omit<components["schemas"]["ICbusOpCode"], "$type"> & ({
      message?: components["schemas"]["ICbusStandardMessage"];
      /** Format: int32 */
      dataLength?: number;
      code?: string | null;
      description?: string | null;
      group?: components["schemas"]["OpCodeGroup"];
      name?: string | null;
      /** Format: int32 */
      number?: number;
      /** Format: int32 */
      priority?: number;
      /** Format: int32 */
      session?: number;
      speedMode?: components["schemas"]["SpeedModeEnum"];
      lights?: boolean;
      direction?: boolean;
      engineState?: components["schemas"]["EngineStateEnum"];
    });
    SetEngineFunctionOff: {
      $type: "SetEngineFunctionOff";
    } & Omit<components["schemas"]["ICbusOpCode"], "$type"> & ({
      message?: components["schemas"]["ICbusStandardMessage"];
      /** Format: int32 */
      dataLength?: number;
      code?: string | null;
      description?: string | null;
      group?: components["schemas"]["OpCodeGroup"];
      name?: string | null;
      /** Format: int32 */
      number?: number;
      /** Format: int32 */
      priority?: number;
      /** Format: int32 */
      session?: number;
      /** Format: int32 */
      functionNumber?: number;
    });
    SetEngineFunctionOn: {
      $type: "SetEngineFunctionOn";
    } & Omit<components["schemas"]["ICbusOpCode"], "$type"> & ({
      message?: components["schemas"]["ICbusStandardMessage"];
      /** Format: int32 */
      dataLength?: number;
      code?: string | null;
      description?: string | null;
      group?: components["schemas"]["OpCodeGroup"];
      name?: string | null;
      /** Format: int32 */
      number?: number;
      /** Format: int32 */
      priority?: number;
      /** Format: int32 */
      session?: number;
      /** Format: int32 */
      functionNumber?: number;
    });
    SetEngineFunctions: {
      $type: "SetEngineFunctions";
    } & Omit<components["schemas"]["ICbusOpCode"], "$type"> & ({
      message?: components["schemas"]["ICbusStandardMessage"];
      /** Format: int32 */
      dataLength?: number;
      code?: string | null;
      description?: string | null;
      group?: components["schemas"]["OpCodeGroup"];
      name?: string | null;
      /** Format: int32 */
      number?: number;
      /** Format: int32 */
      priority?: number;
      /** Format: int32 */
      session?: number;
      functionRange?: components["schemas"]["FunctionRangeEnum"];
      /** Format: int32 */
      value?: number;
    });
    SetEngineSpeedAndDirection: {
      $type: "SetEngineSpeedAndDirection";
    } & Omit<components["schemas"]["ICbusOpCode"], "$type"> & ({
      message?: components["schemas"]["ICbusStandardMessage"];
      /** Format: int32 */
      dataLength?: number;
      code?: string | null;
      description?: string | null;
      group?: components["schemas"]["OpCodeGroup"];
      name?: string | null;
      /** Format: int32 */
      number?: number;
      /** Format: int32 */
      priority?: number;
      /** Format: int32 */
      session?: number;
      /** Format: int32 */
      speedDir?: number;
    });
    SetNodeIntoLearnMode: {
      $type: "SetNodeIntoLearnMode";
    } & Omit<components["schemas"]["ICbusOpCode"], "$type"> & ({
      message?: components["schemas"]["ICbusStandardMessage"];
      /** Format: int32 */
      dataLength?: number;
      code?: string | null;
      description?: string | null;
      group?: components["schemas"]["OpCodeGroup"];
      name?: string | null;
      /** Format: int32 */
      number?: number;
      /** Format: int32 */
      priority?: number;
      /** Format: int32 */
      nodeNumber?: number;
    });
    SetNodeNumber: {
      $type: "SetNodeNumber";
    } & Omit<components["schemas"]["ICbusOpCode"], "$type"> & ({
      message?: components["schemas"]["ICbusStandardMessage"];
      /** Format: int32 */
      dataLength?: number;
      code?: string | null;
      description?: string | null;
      group?: components["schemas"]["OpCodeGroup"];
      name?: string | null;
      /** Format: int32 */
      number?: number;
      /** Format: int32 */
      priority?: number;
      /** Format: int32 */
      nodeNumber?: number;
    });
    /**
     * Format: int32 
     * @example 0: Steps128, 1: Steps14, 2: Steps28Interleaved, 3: Steps28 
     * @enum {integer}
     */
    SpeedModeEnum: 0 | 1 | 2 | 3;
    SystemReset: {
      $type: "SystemReset";
    } & Omit<components["schemas"]["ICbusOpCode"], "$type"> & ({
      message?: components["schemas"]["ICbusStandardMessage"];
      /** Format: int32 */
      dataLength?: number;
      code?: string | null;
      description?: string | null;
      group?: components["schemas"]["OpCodeGroup"];
      name?: string | null;
      /** Format: int32 */
      number?: number;
      /** Format: int32 */
      priority?: number;
    });
    TcpTransportSettings: {
      /** Format: int32 */
      port?: number;
      host?: string | null;
    };
    TeachAnEventInLearnMode: {
      $type: "TeachAnEventInLearnMode";
    } & Omit<components["schemas"]["ICbusOpCode"], "$type"> & ({
      message?: components["schemas"]["ICbusStandardMessage"];
      /** Format: int32 */
      dataLength?: number;
      code?: string | null;
      description?: string | null;
      group?: components["schemas"]["OpCodeGroup"];
      name?: string | null;
      /** Format: int32 */
      number?: number;
      /** Format: int32 */
      priority?: number;
      /** Format: int32 */
      nodeNumber?: number;
      /** Format: int32 */
      eventNumber?: number;
      /** Format: int32 */
      evIndex?: number;
      /** Format: int32 */
      value?: number;
    });
    TeachAnEventInLearnModeUsingEventIndexing: {
      $type: "TeachAnEventInLearnModeUsingEventIndexing";
    } & Omit<components["schemas"]["ICbusOpCode"], "$type"> & ({
      message?: components["schemas"]["ICbusStandardMessage"];
      /** Format: int32 */
      dataLength?: number;
      code?: string | null;
      description?: string | null;
      group?: components["schemas"]["OpCodeGroup"];
      name?: string | null;
      /** Format: int32 */
      number?: number;
      /** Format: int32 */
      priority?: number;
      /** Format: int32 */
      nodeNumber?: number;
      /** Format: int32 */
      eventNumber?: number;
      /** Format: int32 */
      enIndex?: number;
      /** Format: int32 */
      evIndex?: number;
      /** Format: int32 */
      value?: number;
    });
    TrackOff: {
      $type: "TrackOff";
    } & Omit<components["schemas"]["ICbusOpCode"], "$type"> & ({
      message?: components["schemas"]["ICbusStandardMessage"];
      /** Format: int32 */
      dataLength?: number;
      code?: string | null;
      description?: string | null;
      group?: components["schemas"]["OpCodeGroup"];
      name?: string | null;
      /** Format: int32 */
      number?: number;
      /** Format: int32 */
      priority?: number;
    });
    TrackOn: {
      $type: "TrackOn";
    } & Omit<components["schemas"]["ICbusOpCode"], "$type"> & ({
      message?: components["schemas"]["ICbusStandardMessage"];
      /** Format: int32 */
      dataLength?: number;
      code?: string | null;
      description?: string | null;
      group?: components["schemas"]["OpCodeGroup"];
      name?: string | null;
      /** Format: int32 */
      number?: number;
      /** Format: int32 */
      priority?: number;
    });
    UnlearnAnEventInLearnMode: {
      $type: "UnlearnAnEventInLearnMode";
    } & Omit<components["schemas"]["ICbusOpCode"], "$type"> & ({
      message?: components["schemas"]["ICbusStandardMessage"];
      /** Format: int32 */
      dataLength?: number;
      code?: string | null;
      description?: string | null;
      group?: components["schemas"]["OpCodeGroup"];
      name?: string | null;
      /** Format: int32 */
      number?: number;
      /** Format: int32 */
      priority?: number;
      /** Format: int32 */
      nodeNumber?: number;
      /** Format: int32 */
      eventNumber?: number;
    });
    UpdateNodeVariablesRequest: {
      /** Format: int32 */
      nodeNumber?: number;
      variables?: (number)[] | null;
    };
    /**
     * Format: int32 
     * @example 1: Sun, 2: Mon, 3: Tue, 4: Wed, 5: Thu, 6: Fri, 7: Sat 
     * @enum {integer}
     */
    WeekdayEnum: 1 | 2 | 3 | 4 | 5 | 6 | 7;
    WriteAcknowledge: {
      $type: "WriteAcknowledge";
    } & Omit<components["schemas"]["ICbusOpCode"], "$type"> & ({
      message?: components["schemas"]["ICbusStandardMessage"];
      /** Format: int32 */
      dataLength?: number;
      code?: string | null;
      description?: string | null;
      group?: components["schemas"]["OpCodeGroup"];
      name?: string | null;
      /** Format: int32 */
      number?: number;
      /** Format: int32 */
      priority?: number;
      /** Format: int32 */
      nodeNumber?: number;
    });
    WriteCvBitInOpsMode: {
      $type: "WriteCvBitInOpsMode";
    } & Omit<components["schemas"]["ICbusOpCode"], "$type"> & ({
      message?: components["schemas"]["ICbusStandardMessage"];
      /** Format: int32 */
      dataLength?: number;
      code?: string | null;
      description?: string | null;
      group?: components["schemas"]["OpCodeGroup"];
      name?: string | null;
      /** Format: int32 */
      number?: number;
      /** Format: int32 */
      priority?: number;
      /** Format: int32 */
      session?: number;
      /** Format: int32 */
      cv?: number;
      /** Format: int32 */
      value?: number;
    });
    WriteCvByteInOpsMode: {
      $type: "WriteCvByteInOpsMode";
    } & Omit<components["schemas"]["ICbusOpCode"], "$type"> & ({
      message?: components["schemas"]["ICbusStandardMessage"];
      /** Format: int32 */
      dataLength?: number;
      code?: string | null;
      description?: string | null;
      group?: components["schemas"]["OpCodeGroup"];
      name?: string | null;
      /** Format: int32 */
      number?: number;
      /** Format: int32 */
      priority?: number;
      /** Format: int32 */
      session?: number;
      /** Format: int32 */
      cv?: number;
      /** Format: int32 */
      value?: number;
    });
    WriteCvByteInOpsModeByAddress: {
      $type: "WriteCvByteInOpsModeByAddress";
    } & Omit<components["schemas"]["ICbusOpCode"], "$type"> & ({
      message?: components["schemas"]["ICbusStandardMessage"];
      /** Format: int32 */
      dataLength?: number;
      code?: string | null;
      description?: string | null;
      group?: components["schemas"]["OpCodeGroup"];
      name?: string | null;
      /** Format: int32 */
      number?: number;
      /** Format: int32 */
      priority?: number;
      /** Format: int32 */
      address?: number;
      /** Format: int32 */
      cv?: number;
      /** Format: int32 */
      mode?: number;
      /** Format: int32 */
      value?: number;
    });
    WriteCvInServiceMode: {
      $type: "WriteCvInServiceMode";
    } & Omit<components["schemas"]["ICbusOpCode"], "$type"> & ({
      message?: components["schemas"]["ICbusStandardMessage"];
      /** Format: int32 */
      dataLength?: number;
      code?: string | null;
      description?: string | null;
      group?: components["schemas"]["OpCodeGroup"];
      name?: string | null;
      /** Format: int32 */
      number?: number;
      /** Format: int32 */
      priority?: number;
      /** Format: int32 */
      session?: number;
      /** Format: int32 */
      cv?: number;
      serviceMode?: components["schemas"]["ServiceModeEnum"];
      /** Format: int32 */
      value?: number;
    });
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export type operations = Record<string, never>;
